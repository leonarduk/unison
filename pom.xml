<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>uk.co.sleonard</groupId>
	<artifactId>unison</artifactId>
	<version>1.2.4</version>
	<name>unison</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<log4j.version>1.2.17</log4j.version>
		<slf4j-log4j12.version>1.5.6</slf4j-log4j12.version>
		<junit.version>4.11</junit.version>
		<java.version>1.8</java.version>
		<powermock.version>1.6.5</powermock.version>
		<mockito.version>1.10.19</mockito.version>
		<javax.mail.version>1.4</javax.mail.version>
		<maven-assembly-plugin.version>2.2-beta-4
		</maven-assembly-plugin.version>
		<jacoco.version>0.7.6.201602180812</jacoco.version>
		<jms.version>1.1</jms.version>
		<javassist.version>3.18.1-GA</javassist.version>
		<commons-net>3.5</commons-net>
		<freemarker.version>2.3.9</freemarker.version>
		<httpunit.version>1.6.2</httpunit.version>
		<oro.version>2.0.8</oro.version>
		<javax-activation.version>1.1.1</javax-activation.version>
		<googlecode-json.version>1.1</googlecode-json.version>
		<antlr.version>2.7.6</antlr.version>
		<asm.version>1.5.3</asm.version>
		<asm-attrs.version>1.5.3</asm-attrs.version>
		<cglib.version>2.1_3</cglib.version>
		<colt.version>1.2.0</colt.version>
		<commons-collections.version>3.2</commons-collections.version>
		<commons-lang.version>2.1</commons-lang.version>
		<commons-logging.version>1.0.4</commons-logging.version>
		<db-ojb.version>1.0.4-patch9</db-ojb.version>
		<dom4f.version>1.5.2</dom4f.version>
		<ehcache.version>1.2</ehcache.version>
		<hibernate-core.version>3.3.2.GA</hibernate-core.version>
		<hibernate-tools.version>3.2.3.GA</hibernate-tools.version>
		<hsqldb.version>1.8.0.1</hsqldb.version>
		<jdom.version>b10</jdom.version>
		<jta.version>1.1</jta.version>
		<jtidy.version>r8-20060801</jtidy.version>
		<jung.version>1.7.6</jung.version>
		<junit.version>4.12</junit.version>
		<oscache.version>2.4.1</oscache.version>
		<swing-layout.version>1.0.3</swing-layout.version>
		<mail.version>1.4.7</mail.version>
		<dom4j.version>1.5.2</dom4j.version>
	</properties>

	<build>
		<plugins>
			<!-- Build an executable JAR -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${maven-assembly-plugin.version}</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<mainClass>uk.co.sleonard.unison.gui.generated.DownloadNewsPanel
							</mainClass>
						</manifest>
					</archive>
					<skipTests>${skipTests}</skipTests>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>uk.co.sleonard.unison.gui.generated.DownloadNewsPanel
							</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<excludes>
						<exclude>uk/co/sleonard/unison/gui/*.class</exclude>
						<exclude>uk/co/sleonard/unison/gui/generated/*.class</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.6.3</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh</serverId>
					<nexusUrl>https://oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
				</configuration>
			</plugin>
			<plugin>
				<!-- run the integration tests -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.18.1</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.9.1</version>
				<executions>
					<execution>
						<id>add-integration-test-source-as-test-sources</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.8</version>
				<executions>
					<execution>
						<id>copy-installed</id>
						<phase>install</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
									<type>${project.packaging}</type>
									<destFileName>unison.jar</destFileName>
								</artifactItem>
							</artifactItems>
							<outputDirectory>deploy</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<!-- Added because javax.jms has not been found on maven repository -->
		<repository>
			<id>repository.jboss.org-public</id>
			<name>JBoss repository</name>
			<url>https://repository.jboss.org/nexus/content/groups/public</url>
		</repository>
	</repositories>

	<dependencies>

		<dependency>
			<groupId>javax.jms</groupId>
			<artifactId>jms</artifactId>
			<version>${jms.version}</version>
		</dependency>

		<!-- Caused by: java.lang.ClassNotFoundException: org.slf4j.impl.StaticLoggerBinder -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j-log4j12.version}</version>
		</dependency>

		<!-- Caused by: java.lang.ClassNotFoundException: javassist.util.proxy.MethodFilter -->
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>${javassist.version}</version>
		</dependency>

		<!-- 1.2.9 to 1.2.12 -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
			<version>${commons-net}</version>
		</dependency>

		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>${freemarker.version}</version>
		</dependency>

		<dependency>
			<groupId>httpunit</groupId>
			<artifactId>httpunit</artifactId>
			<version>${httpunit.version}</version>
		</dependency>

		<dependency>
			<groupId>oro</groupId>
			<artifactId>oro</artifactId>
			<version>${oro.version}</version>
		</dependency>

		<!-- 1.0.2 version has not been found. Using 1.1.1 -->
		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>${javax-activation.version}</version>
		</dependency>

		<dependency>
			<groupId>antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>${antlr.version}</version>
		</dependency>

		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm</artifactId>
			<version>${asm.version}</version>
		</dependency>

		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-attrs</artifactId>
			<version>${asm-attrs.version}</version>
		</dependency>

		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
		</dependency>

		<dependency>
			<groupId>colt</groupId>
			<artifactId>colt</artifactId>
			<version>${colt.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>${commons-collections.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${commons-lang.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>${commons-logging.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.db.ojb</groupId>
			<artifactId>db-ojb</artifactId>
			<version>${db-ojb.version}</version>
		</dependency>

		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>${dom4j.version}</version>
		</dependency>

		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>${ehcache.version}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate-core.version}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-tools</artifactId>
			<version>${hibernate-tools.version}</version>
		</dependency>

		<dependency>
			<groupId>hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>${hsqldb.version}</version>
		</dependency>

		<!-- <dependency> <groupId>gnu.classpath.ext</groupId> <artifactId>inetlib</artifactId> 
			<version>1.1.1</version> </dependency> -->

		<dependency>
			<groupId>jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>${jdom.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>${jta.version}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>jtidy</artifactId>
			<version>${jtidy.version}</version>
		</dependency>

		<dependency>
			<groupId>jung</groupId>
			<artifactId>jung</artifactId>
			<version>${jung.version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>opensymphony</groupId>
			<artifactId>oscache</artifactId>
			<version>${oscache.version}</version>
		</dependency>

		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swing-layout</artifactId>
			<version>${swing-layout.version}</version>
		</dependency>

		<!-- gnumail lib not found. Then we checked that the package used is (javax.mail). 
			So, we have added its dependency -->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>${mail.version}</version>
		</dependency>

		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>${jacoco.version}</version>
			<type>maven-plugin</type>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.6.2</version>
		</dependency>
	</dependencies>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.9.1</version>
				<configuration>
					<configLocation>formatters/checkstyle.xml</configLocation><!-- default -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
			</plugin>
		</plugins>
	</reporting>
	<!-- to get to sona type and onto maven central -->
	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/
			</url>
		</repository>
	</distributionManagement>
	<developers>
		<developer>
			<id>leonarduk</id>
			<name>Stephen Leonard</name>
			<email>github@leonarduk.com</email>
			<roles>
				<role>Project Manager</role>
				<role>Architect</role>
				<role>Developer</role>
			</roles>
			<organization>Leonard UK Ltd</organization>
			<organizationUrl>http://leonarduk.com</organizationUrl>
			<timezone>0</timezone>
			<url>http://uk.linkedin.com/in/steveleonard/</url>
		</developer>
		<developer>
			<id>leonarduk</id>
			<name>Elton Nunes</name>
			<email>elton_12_nunes@hotmail.com</email>
			<roles>
				<role>Developer</role>
			</roles>
			<timezone>0</timezone>
			<url>https://br.linkedin.com/in/eltonnunes1/en</url>
		</developer>
	</developers><!-- to get to sona type and onto maven central -->
	<profiles>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.1</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo.webstart</groupId>
						<artifactId>webstart-maven-plugin</artifactId>
						<executions>
							<execution>
								<!-- bind to phase, I prefer to call it manualls -->
								<phase>package</phase>
								<goals>
									<goal>jnlp-inline</goal> <!-- use jnlp, jnlp-inline or jnlp-single as appropriate -->
								</goals>
							</execution>
						</executions>
						<configuration>
							<!--outputDirectory></outputDirectory --> <!-- not required?? -->

							<!-- Set to true to exclude all transitive dependencies. Default is 
								false. -->
							<excludeTransitive>false</excludeTransitive>

							<!-- The path where the libraries are stored within the jnlp structure. 
								not required. by default the libraries are within the working directory -->
							<libPath>lib</libPath>
							<outputJarVersions>true</outputJarVersions>
							<!-- [optional] transitive dependencies filter - if omitted, all transitive 
								dependencies are included -->
							<dependencies>
								<!-- Note that only groupId and artifactId must be specified here. 
									because of a limitation of the Include/ExcludesArtifactFilter -->
								<!-- <includes> <include>commons-logging:commons-logging</include> 
									<include>commons-cli:commons-cli</include> </includes> -->
								<!-- <excludes> <exclude></exclude> <excludes> -->
							</dependencies>

							<!-- <resourcesDirectory>${project.basedir}/src/main/jnlp/resources</resourcesDirectory> -->
							<!-- default value -->

							<!-- JNLP generation -->
							<jnlp>
								<!-- default values -->
								<!--inputTemplateResourcePath>${project.basedir}</inputTemplateResourcePath -->
								<inputTemplate>src/main/jnlp/template.vm</inputTemplate> <!-- relative to inputTemplateResourcePath -->
								<outputFile>unison.jnlp</outputFile> <!-- defaults to launch.jnlp -->

								<!-- used to automatically identify the jar containing the main class. -->
								<!-- this is perhaps going to change -->
								<mainClass>uk.co.sleonard.unison.gui.generated.DownloadNewsPanel
								</mainClass>
							</jnlp>


							<!-- SIGNING -->
							<!-- defining this will automatically sign the jar and its dependencies, 
								if necessary -->
							<sign>
								<keystore>${basedir}/keystore</keystore>
								<keypass>upwork2016</keypass>  <!-- we need to override passwords easily from the command line. ${keypass} -->
								<storepass>password</storepass> <!-- ${storepass} -->
								<!-- retype>fillme</storetype -->
								<alias>unison</alias>

								<!--validity>fillme</validity -->

								<!-- only required for generating the keystore -->
								<dnameCn>unison</dnameCn>
								<dnameOu>Organisation Unit</dnameOu>
								<dnameO>Organisation</dnameO>
								<dnameL>Location</dnameL>
								<dnameSt>State</dnameSt>
								<dnameC>Country</dnameC>

								<verify>false</verify> <!-- verify that the signing operation succeeded -->


								<!-- KEYSTORE MANAGEMENT -->
								<keystoreConfig>
									<delete>true</delete> <!-- delete the keystore -->
									<gen>true</gen>       <!-- optional shortcut to generate the store. -->
								</keystoreConfig>
							</sign>

							<!-- BUILDING PROCESS -->

							<pack200>false</pack200>
							<gzip>true</gzip> <!-- default force when pack200 false, true when pack200 selected ?? -->

							<!-- causes a version attribute to be output in each jar resource 
								element, optional, default is false -->
							<outputJarVersions>false</outputJarVersions>

							<!--install>false</install --> <!-- not yet supported -->
							<verbose>true</verbose>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>
	</profiles>
</project>